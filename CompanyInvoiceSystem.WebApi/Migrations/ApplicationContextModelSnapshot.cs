// <auto-generated />
using System;
using CompanyInvoiceSystem.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompanyInvoiceSystem.WebApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CompanyInvoiceSystem.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressUnitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EIN")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDomestic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("INDEX_Companies__Company_NAME");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00e629dd-4728-47b7-a4cc-8ec2ec1bd578"),
                            AddressStreet = "100 Main St",
                            AddressUnitNumber = "12 Floor",
                            City = "New York",
                            EIN = 123456789,
                            Name = "AZ Tech",
                            PhoneNumber = "212-500-5000",
                            State = "NY",
                            ZipCode = "10002"
                        },
                        new
                        {
                            Id = new Guid("402f8243-c49e-415f-80c9-e4fa960be72f"),
                            AddressStreet = "100 Coyle St",
                            AddressUnitNumber = "#10",
                            City = "New York",
                            EIN = 100000001,
                            Name = "Brooklyn Trucks Inc.",
                            PhoneNumber = "212-300-3000",
                            State = "NY",
                            ZipCode = "10012"
                        },
                        new
                        {
                            Id = new Guid("97db1d64-348a-4b3f-aa65-3464da8be0ad"),
                            AddressStreet = "112 Adams St",
                            AddressUnitNumber = "Unit 101",
                            City = "New York",
                            EIN = 100000331,
                            Name = "Alt Solutions",
                            PhoneNumber = "212-200-2000",
                            State = "NY",
                            ZipCode = "10012"
                        },
                        new
                        {
                            Id = new Guid("00483bda-812d-450d-8a9a-d8d02ce0a0d8"),
                            EIN = 432451389,
                            Name = "3A Logistics",
                            PhoneNumber = "333-533-3333"
                        },
                        new
                        {
                            Id = new Guid("a4293a2a-6dda-4d44-a07c-38ffc27bc485"),
                            EIN = 432451399,
                            Name = "3B Logistics"
                        });
                });

            modelBuilder.Entity("CompanyInvoiceSystem.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalValue")
                        .IsRequired()
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54598cb0-62fb-4be2-bb17-9a2706518bfa"),
                            CompanyId = new Guid("402f8243-c49e-415f-80c9-e4fa960be72f"),
                            InvoiceDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceType = 2,
                            TotalValue = 3589.54m
                        },
                        new
                        {
                            Id = new Guid("29ec7d04-fade-4443-b4ca-810710eff715"),
                            CompanyId = new Guid("402f8243-c49e-415f-80c9-e4fa960be72f"),
                            InvoiceDate = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceType = 2,
                            TotalValue = 5687.54m
                        },
                        new
                        {
                            Id = new Guid("53c31f39-af20-4d36-b9f5-6970c62a0db7"),
                            CompanyId = new Guid("00e629dd-4728-47b7-a4cc-8ec2ec1bd578"),
                            InvoiceDate = new DateTime(2020, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceType = 4,
                            TotalValue = 10000.54m
                        });
                });

            modelBuilder.Entity("CompanyInvoiceSystem.Entities.LookupValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LookupValueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LookupKey")
                        .HasColumnType("int");

                    b.Property<string>("LookupText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LookupType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LookupValue");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d883a416-567b-4214-832c-55725541abc0"),
                            LookupKey = 0,
                            LookupText = "None",
                            LookupType = "InvoiceType"
                        },
                        new
                        {
                            Id = new Guid("f5da5828-53a7-4f99-9730-c81fd6f03ee4"),
                            LookupKey = 1,
                            LookupText = "Credit",
                            LookupType = "InvoiceType"
                        },
                        new
                        {
                            Id = new Guid("67b0e591-18c5-4878-9eae-07d70b41bd33"),
                            LookupKey = 2,
                            LookupText = "Debit",
                            LookupType = "InvoiceType"
                        },
                        new
                        {
                            Id = new Guid("02bad192-acc7-4392-900f-2d7c4abba52f"),
                            LookupKey = 4,
                            LookupText = "Mixed",
                            LookupType = "InvoiceType"
                        },
                        new
                        {
                            Id = new Guid("a7f4aeb1-9d7e-4ef6-b38e-b0f6836ffd58"),
                            LookupKey = 8,
                            LookupText = "Commercial",
                            LookupType = "InvoiceType"
                        });
                });

            modelBuilder.Entity("CompanyInvoiceSystem.Entities.Invoice", b =>
                {
                    b.HasOne("CompanyInvoiceSystem.Entities.Company", "Company")
                        .WithMany("Invoices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
