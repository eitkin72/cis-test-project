// <auto-generated />
using System;
using CompanyInvoiceSystem.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompanyInvoiceSystem.WebApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20201011055210_InvoicesTablesAndRelationshipAndSeed")]
    partial class InvoicesTablesAndRelationshipAndSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CompanyInvoiceSystem.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EIN")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDomestic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("INDEX_Companies__Company_NAME");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9a600ef-aaf9-47cf-8d25-0926dd29298f"),
                            EIN = 123456789,
                            Name = "AZ Tech"
                        },
                        new
                        {
                            Id = new Guid("80a0c295-7775-4b2f-bba1-05033c5d33ad"),
                            EIN = 100000001,
                            Name = "Brooklyn Trucks Inc."
                        },
                        new
                        {
                            Id = new Guid("5a71a5a1-c7ae-4c0e-a6a0-416f4b0caab7"),
                            EIN = 100000331,
                            Name = "Alt Solutions"
                        },
                        new
                        {
                            Id = new Guid("ecbc3acf-3cf1-4415-94d5-2112ed585538"),
                            EIN = 432451389,
                            Name = "3A Logistics"
                        },
                        new
                        {
                            Id = new Guid("cf52cbe9-b506-423c-9d62-55c8a25ebcd6"),
                            EIN = 432451399,
                            Name = "3B Logistics"
                        });
                });

            modelBuilder.Entity("CompanyInvoiceSystem.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalValue")
                        .IsRequired()
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1132f45-9435-4689-a260-00b95923ebc2"),
                            CompanyId = new Guid("80a0c295-7775-4b2f-bba1-05033c5d33ad"),
                            InvoiceDate = new DateTime(2019, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceType = 2,
                            TotalValue = 3589.54m
                        },
                        new
                        {
                            Id = new Guid("c81d53c5-14fd-4cbd-b9e9-5859fb67113d"),
                            CompanyId = new Guid("80a0c295-7775-4b2f-bba1-05033c5d33ad"),
                            InvoiceDate = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceType = 2,
                            TotalValue = 5687.54m
                        },
                        new
                        {
                            Id = new Guid("fe5e1800-d848-474b-8ccd-0bb08246b2e8"),
                            CompanyId = new Guid("e9a600ef-aaf9-47cf-8d25-0926dd29298f"),
                            InvoiceDate = new DateTime(2020, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceType = 4,
                            TotalValue = 10000.54m
                        });
                });

            modelBuilder.Entity("CompanyInvoiceSystem.Entities.LookupValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LookupValueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LookupKey")
                        .HasColumnType("int");

                    b.Property<string>("LookupText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LookupType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LookupValue");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1905c769-3e21-4357-b3f8-78cc85591e9d"),
                            LookupKey = 0,
                            LookupText = "None",
                            LookupType = "InvoiceType"
                        },
                        new
                        {
                            Id = new Guid("9ff1e123-9beb-49ea-9e56-f376936223db"),
                            LookupKey = 1,
                            LookupText = "Credit",
                            LookupType = "InvoiceType"
                        },
                        new
                        {
                            Id = new Guid("1b6501d6-89e9-47d7-82c9-12f4b898634d"),
                            LookupKey = 2,
                            LookupText = "Debit",
                            LookupType = "InvoiceType"
                        },
                        new
                        {
                            Id = new Guid("c24e292e-cd04-46ef-8785-38e65a79d84c"),
                            LookupKey = 4,
                            LookupText = "Mixed",
                            LookupType = "InvoiceType"
                        },
                        new
                        {
                            Id = new Guid("0780a2d7-4da4-48e4-be6e-f3cc5e31ebbf"),
                            LookupKey = 8,
                            LookupText = "Commercial",
                            LookupType = "InvoiceType"
                        });
                });

            modelBuilder.Entity("CompanyInvoiceSystem.Entities.Invoice", b =>
                {
                    b.HasOne("CompanyInvoiceSystem.Entities.Company", "Company")
                        .WithMany("Invoices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
